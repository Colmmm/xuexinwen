[pytest]
# Test discovery patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test paths to include/exclude
testpaths = tests
norecursedirs = .git __pycache__ .pytest_cache

# Configure test output
addopts = 
    --verbose
    --color=yes
    --capture=no
    --strict-markers
    --tb=short

# Define custom markers
markers =
    unit: Unit tests
    integration: Integration tests
    slow: Tests that take longer to run
    llm: Tests that involve LLM interactions
    db: Tests that interact with the database
    db_write: Tests that write to the database
    db_read: Tests that only read from the database

# Configure logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Configure test coverage
# Note: Coverage settings can also be placed in .coveragerc
[coverage:run]
source = backend
omit = 
    */tests/*
    */__init__.py
    */migrations/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise NotImplementedError
    if __name__ == .__main__.:
    pass
    raise ImportError

# Configure test environment and database
[tool:pytest]
env =
    TESTING=true
    MYSQL_DATABASE=xuexinwen_test
    MYSQL_USER=test_user
    MYSQL_PASSWORD=test_password
    MYSQL_HOST=localhost
    MYSQL_PORT=3306
    MYSQL_CHARSET=utf8mb4
    MYSQL_COLLATION=utf8mb4_unicode_ci
    OPENROUTER_API_KEY=dummy_key
    BACKEND_PRODUCTION=false

# MySQL test configuration
mysql_test_config = 
    --character-set-server=utf8mb4
    --collation-server=utf8mb4_unicode_ci
    --default-storage-engine=InnoDB
    --sql-mode=STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION
    --max-connections=50
    --wait-timeout=28800
    --interactive-timeout=28800

# Test database markers
markers =
    db: marks tests that interact with the database
    db_write: marks tests that write to the database
    db_read: marks tests that only read from the database

# Configure test timeouts
timeout = 300

# Configure parallel test execution
# Note: Some tests (like those using LLM) might need to run serially
addopts = 
    -n auto
    --dist=loadfile
    --max-worker-restart=0
